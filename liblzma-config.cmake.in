set(LIBLZMA_VERSION "@LIBLZMA_VERSION@")
set(LIBLZMA_VERSION_MAJOR "@LIBLZMA_MAJOR_VERSION@")
set(LIBLZMA_VERSION_MINOR "@LIBLZMA_MINOR_VERSION@")
set(LIBLZMA_VERSION_PATCH "@LIBLZMA_PATCH_VERSION@")

@PACKAGE_INIT@

include("${CMAKE_CURRENT_LIST_DIR}/liblzma-export.cmake")

set(LIBLZMA_DEFINITIONS "")
set(LIBLZMA_INCLUDE_DIRS "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@")
set(LIBLZMA_LIBRARY_DIRS "${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@")

macro(select_library_location target basename)
	foreach(property IN ITEMS IMPORTED_LOCATION IMPORTED_IMPLIB)
		get_target_property(${basename}_${property}_DEBUG ${target} ${property}_DEBUG)
		get_target_property(${basename}_${property}_MINSIZEREL ${target} ${property}_MINSIZEREL)
		get_target_property(${basename}_${property}_RELEASE ${target} ${property}_RELEASE)
		get_target_property(${basename}_${property}_RELWITHDEBINFO ${target} ${property}_RELWITHDEBINFO)
		
		if(${basename}_${property}_DEBUG AND ${basename}_${property}_RELEASE)
			set(${basename}_LIBRARIES debug ${${basename}_${property}_DEBUG} optimized ${${basename}_${property}_RELEASE})
		elseif(${basename}_${property}_DEBUG AND ${basename}_${property}_RELWITHDEBINFO)
			set(${basename}_LIBRARIES debug ${${basename}_${property}_DEBUG} optimized ${${basename}_${property}_RELWITHDEBINFO})
		elseif(${basename}_${property}_DEBUG AND ${basename}_${property}_MINSIZEREL)
			set(${basename}_LIBRARIES debug ${${basename}_${property}_DEBUG} optimized ${${basename}_${property}_MINSIZEREL})
		elseif(${basename}_${property}_RELEASE)
			set(${basename}_LIBRARIES ${${basename}_${property}_RELEASE})
		elseif(${basename}_${property}_RELWITHDEBINFO)
			set(${basename}_LIBRARIES ${${basename}_${property}_RELWITHDEBINFO})
		elseif(${basename}_${property}_MINSIZEREL)
			set(${basename}_LIBRARIES ${${basename}_${property}_MINSIZEREL})
		elseif(${basename}_${property}_DEBUG)
			set(${basename}_LIBRARIES ${${basename}_${property}_DEBUG})
		endif()
	endforeach()
endmacro()

select_library_location(LibLZMA::LibLZMA LIBLZMA)

include(CMakeFindDependencyMacro)

if(@LIBLZMA_COND_THREADS@)
	find_dependency(Threads)
	if(Threads_FOUND AND NOT TARGET Threads::Threads)
		add_library(Threads::Threads INTERFACE IMPORTED)
		if(THREADS_HAVE_PTHREAD_ARG)
			set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler -pthread>" "$<$<NOT:$<COMPILE_LANGUAGE:CUDA>>:-pthread>")
		endif()
		if(CMAKE_THREAD_LIBS_INIT)
			set_property(TARGET Threads::Threads PROPERTY INTERFACE_LINK_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")
		endif()
	endif()
	list(APPEND LIBLZMA_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
endif()
